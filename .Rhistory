#' @param seed
#' @param maxSuppSize
#' @param nGamma
#' @param gammaMin
#' @param gammaMax
#'
#' @return
#' @export
#'
#' @examples
LO_fit <- function(X, Y,
penalty = penalty,
nFolds = 10,
seed = 1,
maxSuppSize = maxSuppSize,
nGamma = 5,
gammaMin = 0.0001, gammaMax = 10) {
tryCatch(
{
fit <- L0Learn.cvfit(X, Y,
penalty = penalty,
maxSuppSize = maxSuppSize,
nFolds = 10,
seed = 1,
nGamma = 5,
gammaMin = 0.0001,
gammaMax = 10
)
fit_inf <- print(fit)
optimalGammaIndex <- which(unlist(lapply(fit$cvMeans, min)) == min(unlist(lapply(fit$cvMeans, min))))
gamma <- fit$fit$gamma[optimalGammaIndex]
lambda_list <- fit_inf[which(fit_inf$gamma == gamma), ]
if (is.null(maxSuppSize)) {
lambda <- min(lambda_list$lambda)
} else {
if (maxSuppSize %in% lambda_list$maxSuppSize) {
lambda <- lambda_list$maxSuppSize[which(lambda_list$maxSuppSize == maxSuppSize)]
} else {
lambda <- min(lambda_list$lambda)
}
}
temp <- coef(fit, lambda = lambda, gamma = gamma)
},
error = function(e) {
fit <- L0Learn.fit(X, Y,
penalty = penalty,
maxSuppSize = maxSuppSize,
nGamma = 5,
gammaMin = 0.0001,
gammaMax = 10
)
fit_inf <- print(fit)
fit_inf <- fit_inf[order(fit_inf$suppSize, decreasing = TRUE), ]
lambda <- fit_inf$lambda[1]
gamma <- fit_inf$gamma[1]
temp <- coef(fit,
lambda = lambda,
gamma = gamma
)
}
)
}
